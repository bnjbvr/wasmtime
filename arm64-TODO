TODO:

- Debugging and misc fixups
  - Ret in epilogue: appears before return-value move?
  - Whole backend runs twice (see debug spew)?
  - Ensure that clobbered reg saves in ARM64 ABI consider register class

- Legalization
  - see cranelift-codegen/meta/src/shared/legalize.rs
  - instructions: global_value, heap_addr, table_addr, trapz, trapnz, br_table,
                  select, fconst, stack_load, stack_store
  - widening: I8, I16
    - see signed-divide and bit ops for special cases
    - (sewardj 2020Feb16: let's discuss before implementing? I think
       dealing with I8/I16 ops directly in the isel is simple and gives
       good results)
  - narrowing: I128

  - Document which opcodes should for sure not appear in legalized code.

- ISA completeness:
  - ImmLogic: implement the algorithm to determine whether an immediate can be
    encoded as a logical immediate.
  - Add opcodes to lowering. Full integer/ALU instruction set.

- Lowering tests
  - Make sure all (non-vector) filetests can compile
  - Develop suite of golden-machine-code (or golden-assembly?) tests
  - verify a bunch of corner / interesting cases
    - add128 / add-with-carry
    - conditional select?
    - bit ops
    - multiply-add / multiply-subtract
    - address of global (with relos)

- Function ABI:
  - caller side
    - Move args into place; set clobbers (defs of real regs) on Call inst; do
      call; move retvals out

- Binary emission
  - Resolve relocations: GlobalValue, Function (multiple-insn seq for address?)

- Calling conventions for non-SysV cases
  - Wasm: take implicit VMContext argument
  - audit for others

- Limits (handle gracefully / return error from lowering)
  - Jump offsets (19, 26-bit forms)

- Performance tests vs. SpiderMonkey WASM
  - make sure that cranelift-wasm can run (or wasmtime?)
  - compile benchmarks (Spec CPU? bzip2? rustfmt? tinycc?)
  - SM JS shell: ./js --wasm-compiler=ion
  - SM with Cranelift: ./js --wasm-compiler=cranelift

- Post-MVP:

  - Partition code by side-effects and permit some reordering: e.g., loads
    incorporated into their uses if not crossing other memory ops
    (see: libVEX's side-effect partitioning)

  - better block reordering: heuristically place after `from` or before `to` if
    only one out-edge or in-edge respectively (?). Or split the compound
    condbr/br and put one crit edge between the branches.

  - VCode (re)design:
    - allow edits (insertions, deletions, block reorder) alongside instruction list
    - rework lowering and VCodeBuilder: single forward pass; delete insns when
      unused

  - VCode as arch-independent input:
    - side-table: single-def for a given register use?
    - put Cranelift IR opcodes/instructions into VCode container

  - Handle out-of-range branches and constant-pool references (out of imm19
    range at least)

  - Better isel for:
    - pre-indexed / post-indexed addressing
    - Load-pair / store-pair

  - Debug info / source-maps

  - Stack maps

-------


Milestones:

- (X) M0: codegen a leaf function (no calls) with only integer add/sub, load/store,
  and control flow. No prologue or epilogue.

- (X) M1: function ABI. Support function arguments and return value. Save clobbered
  registers.

- M2: fill out the integer instruction set. Support all Cranelift ops that are
  not FP or vector-related, in leaf functions.

- M2.5: Support calls to other functions, saving caller-saved regs.

- M3: full Cranelift instruction set support.
