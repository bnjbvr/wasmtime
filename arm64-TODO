TODO:

- MVP:

  - Ensure correctness: build a step-by-step checker
    - Against a WASM interpreter, using the heap and validating stores?
      - in cranelift-wasm, emit calls to a checker runtime.

  - Bringup with SpiderMonkey/arm64
    - Baldrdash calling convention: no prologue/epilogue

  - Compiler flags (opt level at least)?

  - Performance tests vs. SpiderMonkey WASM
    - make sure that cranelift-wasm can run (or wasmtime?)
    - compile benchmarks (Spec CPU? bzip2? rustfmt? tinycc?)
    - SM JS shell: ./js --wasm-compiler=ion
    - SM with Cranelift: ./js --wasm-compiler=cranelift

- Post-MVP:

  - Limits (handle gracefully / return error from lowering)
    - Jump offsets (19, 26-bit forms)

  - ISA:
    - ImmLogic: implement the algorithm to determine whether an immediate can be
      encoded as a logical immediate
    - Floating point and vector support

  - Better section and relo handling (separate .rodata and jumptable)

  - API and naming cleanups
    - Add a "get input insn if we are its only use" method to LowerCtx
      - "conservative" version that does not look past loads/stores
    - rename conditional branch forms in arm64 akin to x64's revised naming
    - remove "inverted" flag in CondBrLowered in arm64
    - remove "CondBrLoweredCompound" entirely?
      - one-target form is just an optimization once we know block order, but
        two-target form can also be converted directly to machine code!
    - with_block_rewrites -> map_blocks
    - with_fallthrough_block -> set_fallthrough_block
    - with_block_offsets -> map_blocks_to_offsets

  - misc fixups
    - Ensure that clobbered reg saves in ARM64 ABI consider register class

  - Better SSA phi-node (block-param) lowering
    - See Sebastian Hack, PhD thesis, 2006. Key idea: handle moves to outputs
      that are not also inputs first, then handle cycles specially (preserving
      read-all-then-write-all semantics).

  - Partition code by side-effects and permit some reordering: e.g., loads
    incorporated into their uses if not crossing other memory ops
    (see: libVEX's side-effect partitioning)

  - better block reordering: heuristically place after `from` or before `to` if
    only one out-edge or in-edge respectively (?). Or split the compound
    condbr/br and put one crit edge between the branches.

  - VCode (re)design:
    - allow edits (insertions, deletions, block reorder) alongside instruction list
    - rework lowering and VCodeBuilder: single forward pass; delete insns when
      unused

  - VCode as arch-independent input:
    - side-table: single-def for a given register use?
    - put Cranelift IR opcodes/instructions into VCode container

  - Handle out-of-range branches and constant-pool references (out of imm19
    range at least)

  - Better isel for:
    - pre-indexed / post-indexed addressing
    - Load-pair / store-pair

  - Debug info / source-maps

  - Stack maps

-------


Milestones:

- (X) M0: codegen a leaf function (no calls) with only integer add/sub, load/store,
  and control flow. No prologue or epilogue.

- (X) M1: function ABI. Support function arguments and return value. Save clobbered
  registers.

- (X) M2: fill out the integer instruction set. Support all Cranelift ops that are
  not FP or vector-related, in leaf functions.

- (X) M2.5: Support calls to other functions, saving caller-saved regs.

- M3: full Cranelift instruction set support, including vector/FP.
