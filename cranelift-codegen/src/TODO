TODO:

- Work out branch lowering, critical edge splits, and machine-independent handling of phis.
  - Lowering driver should call separate entry points in backend for
    non-terminator and terminator cases.
  - Lowering driver should invoke separate "emit_move" and "emit_jump" hooks
    provided by machine backend to lower phis and create split-edge blocks.
    - Two-phase copy to handle "cyclic phis on self-backedge" case.
  - Resolve the block order.
  - Resolve abstract branches:
    - Turn two-target form back into branch/fallthrough.
    - Compute maximum size of all instructions, and block offsets.
    - Given block offsets, allow each branch to use a smaller form. Compute final offsets.
    - Resolve branch targets to concrete values.

- Finish top-level compilation pipeline
  - Integration with regalloc (call minira)
  - Prologue and epilogue generation
  - Binary emission driver
    - Constant pool handling? Alignment?

- ISA completeness:

  - ImmLogic: implement the algorithm to determine whether an immediate can be
    encoded as a logical immediate.

  - Add opcodes to lowering. ALU, loads/stores, control flow.

- Work out how to fit this into Cranelift public API.
