TODO:

- Binary emission

  - top-level driver to emit to a sink, with relos.
  - Constant pool?
  - Basic-block alignment?
  - Get to M0 with CLIF or WASM input and pretty-printing the VCode output

- Function ABI:
  - callee side
    - Arguments and return values
    - Prologue and epilogue generation
  - caller side
    - Clobbers, function args, etc.

- ISA completeness:
  - ImmLogic: implement the algorithm to determine whether an immediate can be
    encoded as a logical immediate.
  - Add opcodes to lowering. ALU, loads/stores, control flow.
  - 8/16-bit ops? Widening for legalization?

- Work out how to fit this into Cranelift public API.
  - Currently a hack-job (two different APIs). Unify somehow.

-------


Milestones:

- M0: codegen a leaf function (no calls) with only integer add/sub, load/store,
  and control flow. No prologue or epilogue.

- M1: function ABI. Support function arguments and return value. Save clobbered
  registers. Support calls to other functions, saving caller-saved regs.

- M2: fill out the integer instruction set. Support all Cranelift ops that are
  not FP or vector-related.

- M3: full Cranelift instruction set support.
